/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace StarknetEscrowFactory {
  export type ImmutablesStruct = {
    orderHash: PromiseOrValue<BytesLike>;
    hashlock: PromiseOrValue<BytesLike>;
    maker: PromiseOrValue<BigNumberish>;
    taker: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    safetyDeposit: PromiseOrValue<BigNumberish>;
    timelocks: PromiseOrValue<BigNumberish>;
  };

  export type ImmutablesStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderHash: string;
    hashlock: string;
    maker: BigNumber;
    taker: BigNumber;
    token: BigNumber;
    amount: BigNumber;
    safetyDeposit: BigNumber;
    timelocks: BigNumber;
  };
}

export interface StarknetEscrowSrcInterface extends utils.Interface {
  functions: {
    "amount()": FunctionFragment;
    "cancel()": FunctionFragment;
    "createdAt()": FunctionFragment;
    "hashlock()": FunctionFragment;
    "maker()": FunctionFragment;
    "orderHash()": FunctionFragment;
    "safetyDeposit()": FunctionFragment;
    "taker()": FunctionFragment;
    "timelocks()": FunctionFragment;
    "token()": FunctionFragment;
    "withdraw(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amount"
      | "cancel"
      | "createdAt"
      | "hashlock"
      | "maker"
      | "orderHash"
      | "safetyDeposit"
      | "taker"
      | "timelocks"
      | "token"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "hashlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "maker", values?: undefined): string;
  encodeFunctionData(functionFragment: "orderHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safetyDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "taker", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelocks", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safetyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface StarknetEscrowSrc extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarknetEscrowSrcInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashlock(overrides?: CallOverrides): Promise<[string]>;

    maker(overrides?: CallOverrides): Promise<[string]>;

    orderHash(overrides?: CallOverrides): Promise<[string]>;

    safetyDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    taker(overrides?: CallOverrides): Promise<[string]>;

    timelocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      secret: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  hashlock(overrides?: CallOverrides): Promise<string>;

  maker(overrides?: CallOverrides): Promise<string>;

  orderHash(overrides?: CallOverrides): Promise<string>;

  safetyDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  taker(overrides?: CallOverrides): Promise<string>;

  timelocks(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  withdraw(
    secret: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(overrides?: CallOverrides): Promise<void>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    hashlock(overrides?: CallOverrides): Promise<string>;

    maker(overrides?: CallOverrides): Promise<string>;

    orderHash(overrides?: CallOverrides): Promise<string>;

    safetyDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    taker(overrides?: CallOverrides): Promise<string>;

    timelocks(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    withdraw(
      secret: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    hashlock(overrides?: CallOverrides): Promise<BigNumber>;

    maker(overrides?: CallOverrides): Promise<BigNumber>;

    orderHash(overrides?: CallOverrides): Promise<BigNumber>;

    safetyDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    taker(overrides?: CallOverrides): Promise<BigNumber>;

    timelocks(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      secret: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safetyDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      secret: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
