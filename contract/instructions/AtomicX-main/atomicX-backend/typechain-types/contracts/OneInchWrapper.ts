/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace OneInchWrapper {
  export type LimitOrderStruct = {
    makerAsset: PromiseOrValue<string>;
    takerAsset: PromiseOrValue<string>;
    makerAmount: PromiseOrValue<BigNumberish>;
    takerAmount: PromiseOrValue<BigNumberish>;
    maker: PromiseOrValue<string>;
    salt: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type LimitOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerAsset: string;
    takerAsset: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    maker: string;
    salt: BigNumber;
    deadline: BigNumber;
  };
}

export interface OneInchWrapperInterface extends utils.Interface {
  functions: {
    "MAX_ORDER_AMOUNT()": FunctionFragment;
    "MIN_ORDER_AMOUNT()": FunctionFragment;
    "cancelLimitOrder((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "cancelledOrders(bytes32)": FunctionFragment;
    "createLimitOrder((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "fillLimitOrder((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "filledOrders(bytes32)": FunctionFragment;
    "getNextNonce(address)": FunctionFragment;
    "getOrderHash((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "incrementNonce(address)": FunctionFragment;
    "isValidOrder((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "oneInchLimitOrderProtocol()": FunctionFragment;
    "oneInchRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOneInchAddresses(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_ORDER_AMOUNT"
      | "MIN_ORDER_AMOUNT"
      | "cancelLimitOrder"
      | "cancelledOrders"
      | "createLimitOrder"
      | "emergencyWithdraw"
      | "fillLimitOrder"
      | "filledOrders"
      | "getNextNonce"
      | "getOrderHash"
      | "incrementNonce"
      | "isValidOrder"
      | "nonces"
      | "oneInchLimitOrderProtocol"
      | "oneInchRouter"
      | "owner"
      | "renounceOwnership"
      | "setOneInchAddresses"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_ORDER_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ORDER_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrders",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLimitOrder",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLimitOrder",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "filledOrders",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderHash",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrder",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchLimitOrderProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOneInchAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ORDER_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ORDER_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneInchLimitOrderProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneInchAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LimitOrderCancelled(bytes32,address)": EventFragment;
    "LimitOrderCreated(bytes32,address,address,address,uint256,uint256,uint256)": EventFragment;
    "LimitOrderFilled(bytes32,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LimitOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LimitOrderCancelledEventObject {
  orderHash: string;
  maker: string;
}
export type LimitOrderCancelledEvent = TypedEvent<
  [string, string],
  LimitOrderCancelledEventObject
>;

export type LimitOrderCancelledEventFilter =
  TypedEventFilter<LimitOrderCancelledEvent>;

export interface LimitOrderCreatedEventObject {
  orderHash: string;
  maker: string;
  makerAsset: string;
  takerAsset: string;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
  deadline: BigNumber;
}
export type LimitOrderCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  LimitOrderCreatedEventObject
>;

export type LimitOrderCreatedEventFilter =
  TypedEventFilter<LimitOrderCreatedEvent>;

export interface LimitOrderFilledEventObject {
  orderHash: string;
  taker: string;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
}
export type LimitOrderFilledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LimitOrderFilledEventObject
>;

export type LimitOrderFilledEventFilter =
  TypedEventFilter<LimitOrderFilledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OneInchWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OneInchWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_ORDER_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_ORDER_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    filledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNextNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderHash(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    incrementNonce(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oneInchLimitOrderProtocol(overrides?: CallOverrides): Promise<[string]>;

    oneInchRouter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOneInchAddresses(
      _router: PromiseOrValue<string>,
      _limitOrderProtocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_ORDER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_ORDER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  cancelLimitOrder(
    order: OneInchWrapper.LimitOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelledOrders(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createLimitOrder(
    order: OneInchWrapper.LimitOrderStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillLimitOrder(
    order: OneInchWrapper.LimitOrderStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  filledOrders(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNextNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderHash(
    order: OneInchWrapper.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  incrementNonce(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidOrder(
    order: OneInchWrapper.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oneInchLimitOrderProtocol(overrides?: CallOverrides): Promise<string>;

  oneInchRouter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOneInchAddresses(
    _router: PromiseOrValue<string>,
    _limitOrderProtocol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_ORDER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ORDER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    cancelLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    filledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNextNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderHash(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    incrementNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneInchLimitOrderProtocol(overrides?: CallOverrides): Promise<string>;

    oneInchRouter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOneInchAddresses(
      _router: PromiseOrValue<string>,
      _limitOrderProtocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LimitOrderCancelled(bytes32,address)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null
    ): LimitOrderCancelledEventFilter;
    LimitOrderCancelled(
      orderHash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null
    ): LimitOrderCancelledEventFilter;

    "LimitOrderCreated(bytes32,address,address,address,uint256,uint256,uint256)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null,
      makerAsset?: null,
      takerAsset?: null,
      makerAmount?: null,
      takerAmount?: null,
      deadline?: null
    ): LimitOrderCreatedEventFilter;
    LimitOrderCreated(
      orderHash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null,
      makerAsset?: null,
      takerAsset?: null,
      makerAmount?: null,
      takerAmount?: null,
      deadline?: null
    ): LimitOrderCreatedEventFilter;

    "LimitOrderFilled(bytes32,address,uint256,uint256)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      taker?: PromiseOrValue<string> | null,
      makerAmount?: null,
      takerAmount?: null
    ): LimitOrderFilledEventFilter;
    LimitOrderFilled(
      orderHash?: PromiseOrValue<BytesLike> | null,
      taker?: PromiseOrValue<string> | null,
      makerAmount?: null,
      takerAmount?: null
    ): LimitOrderFilledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_ORDER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ORDER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    cancelLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    filledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderHash(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonce(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneInchLimitOrderProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    oneInchRouter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOneInchAddresses(
      _router: PromiseOrValue<string>,
      _limitOrderProtocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ORDER_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_ORDER_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillLimitOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    filledOrders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderHash(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementNonce(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidOrder(
      order: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneInchLimitOrderProtocol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneInchRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOneInchAddresses(
      _router: PromiseOrValue<string>,
      _limitOrderProtocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
