/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StarknetEscrowFactory {
  export type ImmutablesStruct = {
    orderHash: PromiseOrValue<BytesLike>;
    hashlock: PromiseOrValue<BytesLike>;
    maker: PromiseOrValue<BigNumberish>;
    taker: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    safetyDeposit: PromiseOrValue<BigNumberish>;
    timelocks: PromiseOrValue<BigNumberish>;
  };

  export type ImmutablesStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderHash: string;
    hashlock: string;
    maker: BigNumber;
    taker: BigNumber;
    token: BigNumber;
    amount: BigNumber;
    safetyDeposit: BigNumber;
    timelocks: BigNumber;
  };
}

export declare namespace OneInchWrapper {
  export type LimitOrderStruct = {
    makerAsset: PromiseOrValue<string>;
    takerAsset: PromiseOrValue<string>;
    makerAmount: PromiseOrValue<BigNumberish>;
    takerAmount: PromiseOrValue<BigNumberish>;
    maker: PromiseOrValue<string>;
    salt: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type LimitOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerAsset: string;
    takerAsset: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    maker: string;
    salt: BigNumber;
    deadline: BigNumber;
  };
}

export interface AtomicSwapIntegrationInterface extends utils.Interface {
  functions: {
    "createAtomicSwapWithLimitOrder((bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint256),bool,(address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "fillLimitOrderWithHTLC((address,address,uint256,uint256,address,uint256,uint256),(bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getContractAddresses()": FunctionFragment;
    "getLimitOrderHash((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "htlcFactory()": FunctionFragment;
    "isLimitOrderValid((address,address,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "oneInchWrapper()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createAtomicSwapWithLimitOrder"
      | "emergencyWithdraw"
      | "fillLimitOrderWithHTLC"
      | "getContractAddresses"
      | "getLimitOrderHash"
      | "htlcFactory"
      | "isLimitOrderValid"
      | "oneInchWrapper"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createAtomicSwapWithLimitOrder",
    values: [
      StarknetEscrowFactory.ImmutablesStruct,
      PromiseOrValue<boolean>,
      OneInchWrapper.LimitOrderStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLimitOrderWithHTLC",
    values: [
      OneInchWrapper.LimitOrderStruct,
      StarknetEscrowFactory.ImmutablesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderHash",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "htlcFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLimitOrderValid",
    values: [OneInchWrapper.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAtomicSwapWithLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLimitOrderWithHTLC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "htlcFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLimitOrderValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AtomicSwapWithLimitOrder(bytes32,address,address,address,uint256,bool)": EventFragment;
    "LimitOrderFilledWithHTLC(bytes32,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AtomicSwapWithLimitOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitOrderFilledWithHTLC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AtomicSwapWithLimitOrderEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  escrow: string;
  amount: BigNumber;
  isLimitOrder: boolean;
}
export type AtomicSwapWithLimitOrderEvent = TypedEvent<
  [string, string, string, string, BigNumber, boolean],
  AtomicSwapWithLimitOrderEventObject
>;

export type AtomicSwapWithLimitOrderEventFilter =
  TypedEventFilter<AtomicSwapWithLimitOrderEvent>;

export interface LimitOrderFilledWithHTLCEventObject {
  orderHash: string;
  taker: string;
  escrow: string;
  amount: BigNumber;
}
export type LimitOrderFilledWithHTLCEvent = TypedEvent<
  [string, string, string, BigNumber],
  LimitOrderFilledWithHTLCEventObject
>;

export type LimitOrderFilledWithHTLCEventFilter =
  TypedEventFilter<LimitOrderFilledWithHTLCEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AtomicSwapIntegration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AtomicSwapIntegrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createAtomicSwapWithLimitOrder(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      createLimitOrder: PromiseOrValue<boolean>,
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillLimitOrderWithHTLC(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractAddresses(overrides?: CallOverrides): Promise<[string, string]>;

    getLimitOrderHash(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    htlcFactory(overrides?: CallOverrides): Promise<[string]>;

    isLimitOrderValid(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oneInchWrapper(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createAtomicSwapWithLimitOrder(
    immutables: StarknetEscrowFactory.ImmutablesStruct,
    createLimitOrder: PromiseOrValue<boolean>,
    limitOrderData: OneInchWrapper.LimitOrderStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillLimitOrderWithHTLC(
    limitOrderData: OneInchWrapper.LimitOrderStruct,
    immutables: StarknetEscrowFactory.ImmutablesStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractAddresses(overrides?: CallOverrides): Promise<[string, string]>;

  getLimitOrderHash(
    limitOrderData: OneInchWrapper.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  htlcFactory(overrides?: CallOverrides): Promise<string>;

  isLimitOrderValid(
    limitOrderData: OneInchWrapper.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oneInchWrapper(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createAtomicSwapWithLimitOrder(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      createLimitOrder: PromiseOrValue<boolean>,
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillLimitOrderWithHTLC(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractAddresses(overrides?: CallOverrides): Promise<[string, string]>;

    getLimitOrderHash(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    htlcFactory(overrides?: CallOverrides): Promise<string>;

    isLimitOrderValid(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oneInchWrapper(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AtomicSwapWithLimitOrder(bytes32,address,address,address,uint256,bool)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null,
      escrow?: null,
      amount?: null,
      isLimitOrder?: null
    ): AtomicSwapWithLimitOrderEventFilter;
    AtomicSwapWithLimitOrder(
      orderHash?: PromiseOrValue<BytesLike> | null,
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null,
      escrow?: null,
      amount?: null,
      isLimitOrder?: null
    ): AtomicSwapWithLimitOrderEventFilter;

    "LimitOrderFilledWithHTLC(bytes32,address,address,uint256)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      taker?: PromiseOrValue<string> | null,
      escrow?: null,
      amount?: null
    ): LimitOrderFilledWithHTLCEventFilter;
    LimitOrderFilledWithHTLC(
      orderHash?: PromiseOrValue<BytesLike> | null,
      taker?: PromiseOrValue<string> | null,
      escrow?: null,
      amount?: null
    ): LimitOrderFilledWithHTLCEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createAtomicSwapWithLimitOrder(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      createLimitOrder: PromiseOrValue<boolean>,
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillLimitOrderWithHTLC(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getLimitOrderHash(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    htlcFactory(overrides?: CallOverrides): Promise<BigNumber>;

    isLimitOrderValid(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneInchWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAtomicSwapWithLimitOrder(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      createLimitOrder: PromiseOrValue<boolean>,
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillLimitOrderWithHTLC(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderHash(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    htlcFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLimitOrderValid(
      limitOrderData: OneInchWrapper.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneInchWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
