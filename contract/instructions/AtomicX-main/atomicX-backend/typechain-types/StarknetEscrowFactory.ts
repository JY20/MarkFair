/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace StarknetEscrowFactory {
  export type ImmutablesStruct = {
    orderHash: PromiseOrValue<BytesLike>;
    hashlock: PromiseOrValue<BytesLike>;
    maker: PromiseOrValue<BigNumberish>;
    taker: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    safetyDeposit: PromiseOrValue<BigNumberish>;
    timelocks: PromiseOrValue<BigNumberish>;
  };

  export type ImmutablesStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderHash: string;
    hashlock: string;
    maker: BigNumber;
    taker: BigNumber;
    token: BigNumber;
    amount: BigNumber;
    safetyDeposit: BigNumber;
    timelocks: BigNumber;
  };
}

export interface StarknetEscrowFactoryInterface extends utils.Interface {
  functions: {
    "createDstEscrow((bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "createSrcEscrow((bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createDstEscrow" | "createSrcEscrow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createDstEscrow",
    values: [StarknetEscrowFactory.ImmutablesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSrcEscrow",
    values: [StarknetEscrowFactory.ImmutablesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDstEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSrcEscrow",
    data: BytesLike
  ): Result;

  events: {
    "EscrowCreated(address,address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowCreated"): EventFragment;
}

export interface EscrowCreatedEventObject {
  maker: string;
  taker: string;
  escrow: string;
  orderHash: string;
}
export type EscrowCreatedEvent = TypedEvent<
  [string, string, string, string],
  EscrowCreatedEventObject
>;

export type EscrowCreatedEventFilter = TypedEventFilter<EscrowCreatedEvent>;

export interface StarknetEscrowFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarknetEscrowFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDstEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSrcEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createDstEscrow(
    immutables: StarknetEscrowFactory.ImmutablesStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSrcEscrow(
    immutables: StarknetEscrowFactory.ImmutablesStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createDstEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createSrcEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "EscrowCreated(address,address,address,bytes32)"(
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null,
      escrow?: null,
      orderHash?: null
    ): EscrowCreatedEventFilter;
    EscrowCreated(
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null,
      escrow?: null,
      orderHash?: null
    ): EscrowCreatedEventFilter;
  };

  estimateGas: {
    createDstEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSrcEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDstEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSrcEscrow(
      immutables: StarknetEscrowFactory.ImmutablesStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
